{"version":3,"sources":["app/reducers.js","app/store.js","app/localStorage.js","components/AddTodo.js","app/action.js","components/Todo.js","components/TodoList.js","app/filter.js","components/VisibleTodoList.js","components/FilterLink.js","components/Footer.js","components/TodoApp.js","components/Root.js","index.js"],"names":["todo","state","action","type","id","text","completed","todoApp","combineReducers","todos","undefined","map","t","configureStore","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","subscribe","throttle","stringify","setItem","saveState","getState","AddTodo","input","dispatch","placeholder","ref","node","required","onClick","value","v4","connect","Todo","onClickHandler","style","textDecoration","TodoList","onTodoClick","filterTodos","filter","VisibleTodoList","withRouter","match","params","FilterLink","children","to","activeStyle","color","Footer","TodoApp","Root","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb1cd7c0.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\nconst todo = (\n  state,\n  action\n) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return {\n        id: action.id,\n        text: action.text,\n        completed: false\n      };\n    case 'TOGGLE_TODO':\n      if (state.id !== action.id) {\n        return state;\n      }\n\n      return {\n        ...state,\n        completed: !state.completed\n      }\n    default:\n      return state;\n  }\n};\n\nconst todos = (\n  state = [],\n  action\n) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [\n        ...state,\n        todo(undefined, action)\n      ];\n    case 'TOGGLE_TODO':\n      return state.map(t => todo(t, action));\n    default:\n      return state;\n  }\n};\n\n// const visibilityFilter = (\n//   state = 'all',\n//   action\n// ) => {\n//   switch (action.type) {\n//     case 'SET_VISIBILITY_FILTER':\n//       return action.filter;\n//     default:\n//       return state;\n//   }\n// };\n\n/*\n// Reducer composition pattern\nconst todoApp = (\n  state = {},\n  action\n) => {\n  return {\n    todos: todos(state.todos, action),\n    visibilityFilter: visibilityFilter(state.visibilityFilter, action)\n  }\n};\n\nconst store = createStore(todoApp);\n\nconst todoApp = combineReducers({\n  todos: todos, //=> todos field in state object will be updated by todos reducer.\n  visibilityFilter: visibilityFilter //=> visibilityFilter field in state object will be updated by visibilityFilter reducer.\n});\n\nconst store = createStore(todoApp);\n\n// From ES6 shorthand notation we can write above code as =>\nconst todoApp = combineReducers({\n  todos, //=> todos field in state object will be updated by todos reducer.\n  visibilityFilter//=> visibilityFilter field in state object will be updated by visibilityFilter reducer.\n});\n\nconst store = createStore(todoApp);\n\n// Write combineReducer from scratch:\n\nconst combineReducers = (reducers) => {\n  return (state = {}, action) => {\n    return Object.keys(reducers).reduce(\n      (nextState, key) => {\n        nextState[key] = reducers[key](\n          state[key],\n          action\n        );\n\n        return nextState;\n      },\n      {}\n    )\n  }\n};\n*/\n\nexport const todoApp = combineReducers({\n  todos, //=> todos field in state object will be updated by todos reducer.\n  // visibilityFilter//=> visibilityFilter field in state object will be updated by visibilityFilter reducer.\n});\n","import { createStore } from 'redux';\nimport throttle from 'lodash/throttle';\nimport { todoApp } from './reducers';\nimport { loadState, saveState } from './localStorage'\n\nconst configureStore = () => {\n  /*\n  const persistedState = {\n    todos: [\n      {\n        type: \"ADD_TODO\",\n        id: 0,\n        text: \"Hello World!\"\n      }\n    ]\n  };*/\n\n  const persistedState = loadState();\n  const store = createStore(todoApp, persistedState)\n  store.subscribe(throttle(() => {\n    saveState({\n      todos: store.getState().todos\n    });\n  }, 1000));\n\n  return store;\n};\n\nexport default configureStore;\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch(err) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch(err) {\n    // Ignored for now.\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo } from '../app/action';\n\nlet AddTodo = ({ dispatch }) => {\n  let input;\n\n  return (\n    <div>\n      <input\n        placeholder='Enter Todo'\n        ref={node => {\n        input = node;\n      }}\n      required={true} />\n\n      <button onClick={() => {\n        dispatch(\n          addTodo(input.value)\n        );\n\n        input.value = '';\n      }}> Add Todo </button>\n    </div>\n  )\n}\n\nAddTodo = connect()(AddTodo);\nexport default AddTodo;\n","import { v4 } from 'node-uuid';\n\nexport const addTodo = (text) => {\n  if(text === '') {\n    return {\n      type: ''\n    };\n  }\n\n  return {\n    type: 'ADD_TODO',\n    id: v4(),\n    text\n  };\n};\n\nexport const toggleTodo = (id) => ({\n  type: 'TOGGLE_TODO',\n  id\n});\n","import React from 'react';\n\nconst Todo = ({\n  text,\n  completed,\n  onClickHandler\n}) => (\n  <li\n    onClick={onClickHandler}\n    style={{\n      textDecoration: completed ?\n        'line-through' :\n        'none'\n    }}\n  >\n    {text}\n  </li>\n);\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './Todo';\n\nconst TodoList = ({\n  todos,\n  onTodoClick\n}) => (\n  <ul>\n    {todos.map(todo => {\n      return(\n        <Todo\n          key={todo.id}\n          {...todo}\n          onClickHandler={() => onTodoClick(todo.id)}\n        />\n      )\n    })}\n  </ul>\n);\n\nexport default TodoList;\n","export const filterTodos = (\n  {todos},\n  filter\n) => {\n  switch (filter) {\n    case 'all':\n      return todos;\n    case 'active':\n      return todos.filter(t => !t.completed);\n    case 'completed':\n      return todos.filter(t => t.completed);\n    default:\n      return todos;\n  }\n}\n\n// export const setVisibilityFilter = (filter) => ({\n//   type: 'SET_VISIBILITY_FILTER',\n//   filter: filter\n// });\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport TodoList from './TodoList';\nimport { toggleTodo } from '../app/action';\nimport { filterTodos } from '../app/filter';\n\n/*\nclass VisibleTodoList extends React.Component {\n  componentDidMount() {\n    const { store } = this.context;\n\n    this.unsubscribe = store.subscribe(() => {\n      this.forceUpdate();\n    })\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    const { store } = this.context;\n    const state = store.getState();\n\n    return (\n      <TodoList\n        onTodoClick={id => {\n          store.dispatch({\n            type: 'TOGGLE_TODO',\n            id\n          });\n        }}\n      />\n    )\n  }\n}\nVisibleTodoList.contextTypes = {\n  store: React.PropTypes\n};\n*/\n\n// Improved one\nconst mapStateToTodosProps = (state, {match}) => ({\n  todos: filterTodos(\n    state,\n    (match.params.filter || 'all')\n  )\n});\n\n// const mapDispatchToTodosProps = (dispatch) => ({\n//   onTodoClick(id) {\n//     dispatch(\n//       toggleTodo(id)\n//     );\n//   }\n// });\n\nconst VisibleTodoList = withRouter(connect(\n  mapStateToTodosProps,\n  { onTodoClick: toggleTodo }\n)(TodoList));\n\nexport default VisibleTodoList;\n","import React from 'react';\n// import { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\n// import { setVisibilityFilter } from '../app/filter';\n// import Link from './Link';\n\n/*\nclass FilterLink extends React.Component {\n  componentDidMount() {\n    const { store } = this.context;\n\n    this.unsubscribe = store.subscribe(() => {\n      this.forceUpdate();\n    })\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    const { store } = this.context;\n    const props = this.props;\n    const state = store.getState();\n\n    return (\n      <Link\n        active={\n          props.filter === state.visibilityFilter\n        }\n        onClick={ () => {\n            store.dispatch({\n              type: 'SET_VISIBILITY_FILTER',\n              filter: props.filter\n            });\n          }\n        }\n      >{props.children}</Link>\n    );\n  }\n}\nFilterLink.contextTypes = {\n  store: React.PropTypes\n}\n*/\n\n// Improved one\n// const mapStateToLinkProps = (\n//   state,\n//   ownProps\n// ) => ({\n//   active: (ownProps.filter === state.visibilityFilter)\n// });\n//\n// const mapDispatchToLinkProps = (\n//   dispatch,\n//   ownProps\n// ) => ({\n//   onClick() {\n//     dispatch(\n//       setVisibilityFilter(ownProps.filter)\n//     );\n//   }\n// });\n//\n// const FilterLink = connect(\n//   mapStateToLinkProps,\n//   mapDispatchToLinkProps\n// )(Link);\n\nconst FilterLink = ({\n  filter,\n  children\n}) => (\n  <NavLink\n    to={filter === 'all' ? '/' : filter}\n    activeStyle={{\n        textDecoration: 'none',\n        color: 'black'\n    }}\n  >\n    { children}\n  </NavLink>\n);\n\nexport default FilterLink;\n","import React from 'react';\nimport FilterLink from './FilterLink';\n\nconst Footer = () => (\n  <div>\n    Show:\n    {' '}\n\n    <FilterLink filter='all'>\n      All\n    </FilterLink>\n    {', '}\n\n    <FilterLink filter='active'>\n      Active\n    </FilterLink>\n    {', '}\n\n    <FilterLink filter='completed'>\n      Completed\n    </FilterLink>\n  </div>\n);\n\nexport default Footer;\n","import React from 'react';\nimport AddTodo from './AddTodo';\nimport VisibleTodoList from './VisibleTodoList';\nimport Footer from './Footer';\n\nconst TodoApp = () => (\n  <div>\n    <AddTodo />\n    <VisibleTodoList />\n    <Footer />\n  </div>\n);\n\nexport default TodoApp;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport TodoApp from './TodoApp';\n\n/*\n// We can import Provider from 'react-redux' library\nclass Provider extends React.Component {\n  getChildContext() {\n    return {\n      store: this.props.store\n    };\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\nProvider.childContextTypes = {\n  store: React.PropTypes\n}\n*/\n\n\nconst Root = ({\n  store\n}) => (\n  <Provider store={store} >\n    <Router>\n      <Switch>\n        <Route path='/:filter?' component={TodoApp} />\n      </Switch>\n    </Router>\n  </Provider>\n);\n\nexport default Root;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport configureStore from './app/store';\nimport Root from './components/Root';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Root store={store} />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}